/*
 * Copyright (c) 2023 Johan Söderbäck
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
//#include <dt-bindings/zmk/rgb.h>

#define CMK_L 0
#define SYM_L 1
#define NUM_L 2
#define NAV_L 3
#define FUN_L 4


/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs§
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */



&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};


/*
	     34 Keys (kyria 50 keys)
    ╭──────────────╮           ╭──────────────╮
  0 │ 1  2  3  4  5│           │ 6  7  8 9  10│ 11
 12 │13 14 15 16 17│           │18 19 20 21 22│ 23
 24 │25 26 27 28 29│30 31 32 33│34 35 36 37 38│ 39
    ╰──────────╮   ╰─╮       ╭─╯   ╭──────────╯
          40 41│42 43│ 44 45 │46 47│48 49
	       ╰─────╯       ╰─────╯
*/

/ {

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };


    combos {
        compatible = "zmk,combos";
        combo_wf_shift {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // W + F
            key-positions = <2 3>;
            bindings = <&skq LSHFT>;
        };
        combo_gm_capsword {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <100>;
            // G + M
            key-positions = <17 18>;
            bindings = <&caps_word>;
        };
        combo_xc_ctrl {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // Z + X
            key-positions = <25 26>;
            bindings = <&sk LCTL>;
        };
/*        combo_unlock {
            timeout-ms = <50>;
            // (Z + SYM) + NAV (NUM + SFT)
            key-positions = <25 34 37 40>;
            bindings = <&tog LCK>;
        };
*/
        combo_commadot_tab {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // , + . = shift
            key-positions = <36 37>;
            bindings = <&kp TAB>;
        };
        combo_opt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // SYM + SPC = CMD
            key-positions = <43 465>;
            bindings = <&sk LCMD>;
        };
        combo_cmd {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // NUM + ENT = OPT
            key-positions = <46 47>;
            bindings = <&sk LALT>;
        };
        combo_bspc {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <80>;
            // SPC + ENT = BSPC
            key-positions = <43 46>;
            bindings = <&kp BSPC>;
        };
        combo_wp_q {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // W + P = Q
            key-positions = <2 4>;
            bindings = <&kp Q>;
        };
    };
};


 
/ {
    keymap {
        compatible = "zmk,keymap";


	// CMK_L (colemak dh)
	default_layer {

            // ------------------------------------------------------       --------------------------------------------------------
            // |    Q    |    W    |    F     |    P     |    B     |       |    J     |    L     |     U    |     Y    |          |
	    // |    A    |    R    |    S     |    T     |    G     |       |    M     |    N     |     E    |     I    |     O    |
	    // |    Z    |    X    |    C     |    D     |    V     |       |    K     |    H     |     ,    |     .    |   -FUN-  |
	    // -------------------------------|  -SYM-   |   SPACE  |       |  RETURN  |  -NUM-   |---------------------------------
	    // 				      -----------------------       -----------------------

	    //											      <>
	    bindings = <	                                                                         
		 &none      &kp Q     &kp W      &kp F      &kp P      &kp B                                                        &kp J      &kp L      &kp U      &kp Y      &none      &none
	       	 &none      &kp A     &kp R      &kp S      &kp T      &kp G                                                        &kp M      &kp N      &kp E      &kp I      &kp O      &none  
                 &none      &kp Z     &kp X      &kp C      &kp D      &kp V      &none      &none             &none      &none     &kp K      &kp H      &kp COMMA  &kp PERIOD &mo FUN_L  &none
	 	                                 &none      &none      &mo SYM_L  &kp SPACE  &none             &none      &kp RET   &mo NUM_L  &none      &none
            >;
        };

	// SYM_L
	symbol_layer {	 

            // ------------------------------------------------------       --------------------------------------------------------
            // |         |    \    |    %     |    $     |          |       |          |     ^    |     [    |     ]    |          |
	    // |    *    |    (    |    )     |    ;     |          |       |          |     "    |     {    |     }    |     :    |
	    // |  -FUN-  |    `    |    @     |    &     |          |       |          |     #    |     <    |     >    |    DEL   |
	    // -------------------------------|  _SYM_   |   SPACE  |       |  RETURN  |    ESC   |---------------------------------
	    //                                -----------------------       -----------------------
            //
	    //                                                                                         <>
	    bindings = <
                 &none     &none     &kp BSLH   &kp PRCNT  &kp DLLR   &none                                                        &none      &kp CARET   &kp LBKT   &kp RBKT   &none       &none
 	       	 &none     &kp STAR  &kp LPAR   &kp RPAR   &kp DLLR   &none                                                        &none      &kp DQT     &kp LBRC   &kp RBRC   &kp COLON   &none  
		 &none     &mo FUN_L &kp GRAVE  &kp AT     &kp AMPS   &none      &none      &none	      &none	 &none	   &none      &kp HASH    &kp LT     &kp GT     &kp DEL     &none  
	 	                                &none      &none      &trans     &kp SPACE  &none             &none      &kp RET   &kp ESC    &none       &none
                 



	         
                 
	    >;
        };


	// NUM_L
	num_layer {

            // ------------------------------------------------------       --------------------------------------------------------
            // |         |    4    |    5     |    6     |          |       |          |     |    |     -    |     /    |          |
	    // |    .    |    1    |    2     |    3     |          |       |          |     '    |     _    |     =    |   -NAV-  |
	    // |    ~    |    7    |    8     |    9     |          |       |          |     +    |     ?    |     !    |    DEL   |
	    // -------------------------------|    0     |   SPACE  |       |  RETURN  |   _NUM_  |---------------------------------
	    //                                -----------------------       -----------------------

	    //                                                                                          <>
	    bindings = <	    
		 &none     &none     &kp N4      &kp N5     &kp N6     &none                                                         &none      &kp PIPE   &kp MINUS  &kp FSLH   &none        &none
	       	 &none     &kp DOT   &kp N1      &kp N2     &kp N3     &none                                                         &none      &kp SQT    &kp UNDER  &kp EQUAL  &mo NAV_L    &none  
                 &none     &kp TILDE &kp N7      &kp N8     &kp N9     &none       &none      &none             &none      &none     &none      &kp PLUS   &kp QMARK  &kp EXCL   &kp DEL      &none
	 	                                 &none      &none      &kp N0      &kp SPACE  &none             &none      &kp RET   &trans     &none      &none
            >;
        };


	// NAV_L
	nav_layer {

            // ------------------------------------------------------       --------------------------------------------------------
            // |         |         |          |          |          |       |          |          |          |          |          |
	    // |         |         |          |          |          |       |   LEFT   |   DOWN   |    UP    |   RIGHT  |   _NAV_  |
	    // |         |         |          |          |          |       |   HOME   |  PG DN   |   PG UP  |   END    |          |
	    // -------------------------------|          |   SPACE  |       |  RETURN  |   _NUM_  |---------------------------------
	    //                                -----------------------       -----------------------

	    //                                                                                          <>
	    bindings = <	    
		 &none     &none     &none       &none      &none      &none                                                         &none      &none      &none      &none      &none        &none
		 &none     &none     &none       &none      &none      &none                                                         &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans       &none  
		 &none     &none     &none       &none      &none      &none       &none      &none             &none      &none     &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &none        &none 
	       	                                 &none      &none      &none       &none      &none             &none      &none     &trans     &none      &none
            >;
        };


	// FUN_L
	fun_layer {

            // ------------------------------------------------------       --------------------------------------------------------
            // |         |    F4   |    F5    |    F6     |   F10    |       |   BT0    |    BT1   |          | BT OUT   | BT CLR   |
	    // |         |    F1   |    F2    |    F3     |   F11    |       |  VMUTE   |  VOL UP  | VOL DN   | USB OUT  |          |
	    // |         |    F7   |    F8    |    F9     |   F12    |       |          |  BRI UP  | BRI DN   |  RESET   |  _FUN_   |
	    // -------------------------------|           |   SPACE  |       |  RETURN  |          |---------------------------------
	    //                                -----------------------       -----------------------

	    //                                                                                          <>
	    bindings = <
		 &none     &none     &kp F6     &kp F5     &kp F6      &kp F10                                                       &bt BT_SEL 0  &bt BT_SEL 1  &none          &out OUT_BLE  &bt BT_CLR  &none
                 &none     &none     &kp F1     &kp F2     &kp F3      &kp F11                                                       &kp K_MUTE    &kp C_VOL_UP  &kp C_VOL_DN   &out OUT_USB  &none       &none
	         &none     &none     &kp F7     &kp F8     &kp F9      &kp F12     &none       &none             &none      &none    &none         &kp C_BRI_UP  &kp C_BRI_DN   &none         &trans      &none  
                                                &none      &none       &none       &trans      &none             &none      &trans   &none         &none         &none
	    >;
        };
    };
};
